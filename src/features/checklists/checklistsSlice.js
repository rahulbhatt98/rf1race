import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchChecklistApi, fetchSelectedChecklistApi, addChecklistApi, selectedChecklistAddApi } from './checklistsAPI';

const initialState = {
  value: 0,
  status: 'idle',
  checklistData: null,
  checklistSelected: null,
  addCheck: null,
  addSelectedCheck:null
};

export const checkAsync = createAsyncThunk("checklist", async (userId) => {
  const response = await fetchChecklistApi(userId);
  return response.data;
});

export const checkSelectedAsync = createAsyncThunk("checkSelected", async (checkId) => {
  const response = await fetchSelectedChecklistApi(checkId);
  return response.data;
});

export const addChecklistAsync = createAsyncThunk("addcheck", async (checklistData) => {
  const response = await addChecklistApi(checklistData);
  return response.data;
});

export const addSelectChecklistAsync = createAsyncThunk("addselectedcheck", async (checklistData) => {
  const response = await selectedChecklistAddApi(checklistData);
  return response.data;
});


export const checkSlice = createSlice({
  name: 'counter',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {

  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
    .addCase(checkAsync.pending, (state) => {
      state.status = 'loading';
    })
    .addCase(checkAsync.fulfilled, (state, action) => {
      state.status = 'idle';
      state.checklistData = action.payload;
    })
    .addCase(checkSelectedAsync.pending, (state) => {
      state.status = 'loading';
    })
    .addCase(checkSelectedAsync.fulfilled, (state, action) => {
      state.status = 'idle';
      state.checklistSelected = action.payload;
    })
    .addCase(addChecklistAsync.pending, (state) => {
      state.status = 'loading';
    })
    .addCase(addChecklistAsync.fulfilled, (state, action) => {
      state.status = 'idle';
      state.addCheck = action.payload;
    })
    .addCase(addSelectChecklistAsync.pending, (state) => {
      state.status = 'loading';
    })
    .addCase(addSelectChecklistAsync.fulfilled, (state, action) => {
      state.status = 'idle';
      state.addSelectedCheck = action.payload;
    })
  },
});

export const fetchChecklist = (state) => state.checklist.checklistData;
export const fetchChecklistSelected = (state) => state.checklist.checklistSelected;

export default checkSlice.reducer;