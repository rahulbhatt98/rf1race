import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import {
  changePasswordApi,
  forgetPasswordApi,
  loginApi,
  registerApi,
  updateApi,
  sendOtpApi,
  socialLogin
} from "./authAPI";

const initialState = {
  user: null,
  user1: null,
  status: "idle",
  forgetPassword: null,
  sendOtp: null,
  changePassword: null,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

export const registerAsync = createAsyncThunk("auth/register", async (data) => {
  const response = await registerApi(data);
  // The value we return becomes the `fulfilled` action payload
  return response.data;
});
export const updateAsync = createAsyncThunk("auth/update", async (data) => {
  const response = await updateApi(data);
  // The value we return becomes the `fulfilled` action payload
  return response.data;
});
export const loginAsync = createAsyncThunk("auth/login", async (data) => {
  const response = await loginApi(data);
  // The value we return becomes the `fulfilled` action payload
  return response.data;
});
export const forgetPasswordAsync = createAsyncThunk(
  "auth/forget/password",
  async (data) => {
    const response = await forgetPasswordApi(data);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);
export const sendOtpAsync = createAsyncThunk("auth/send/otp", async (data) => {
  const response = await sendOtpApi(data);
  // The value we return becomes the `fulfilled` action payload
  return response.data;
});
export const changePasswordAsync = createAsyncThunk(
  "auth/change/password",
  async (data) => {
    const response = await changePasswordApi(data);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const socialAsync = createAsyncThunk("sociallogin", async (data) => {
 const response = await socialLogin(data.email, data.token, data.socialType);
  // The value we return becomes the `fulfilled` action payload
  return response.data;
});

export const authSlice = createSlice({
  name: "auth",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    logout: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.user = null;
      state.forgetPassword = null;
      state.sendOtp = null;
      state.status = "idle";
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(registerAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(registerAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.user1 = action.payload;
      })
      .addCase(updateAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(updateAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.user = action.payload;
      })
      .addCase(loginAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(loginAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.user = action.payload;
      })
      .addCase(forgetPasswordAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(forgetPasswordAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.forgetPassword = action.payload;
      })
      .addCase(sendOtpAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(sendOtpAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.sendOtp = action.payload;
      })
      .addCase(changePasswordAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(changePasswordAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.changePassword = action.payload;
      })
      .addCase(socialAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(socialAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.user1 = action.payload;
      })
  },
});

export const { logout } = authSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectAuth = (state) => state.auth.user;
export const selectRegisterAuth = (state) => state.auth.user1;
export const selectAuthForgetPassword = (state) => state.auth;
export const socialLoginDetails = (state) => state.auth.user1;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount) => (dispatch, getState) => {
//   const currentValue = selectAuth(getState());
//   if (currentValue % 2 === 1) {
//     // dispatch(incrementByAmount(amount));
//   }
// };

export default authSlice.reducer;